worker_processes  1;
error_log logs/error.log;

events {
	worker_connections 1024;
}


http {
	lua_shared_dict db 10m;

	#auth_request /auth;

	upstream sso_back {
		server sso:8282;
	}

	upstream xfutil {
		server futil:8383;
	}

  server {
    listen 80;

		client_max_body_size 500M;
		
		#server_name open;

		location /set {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
				local name=ngx.var.arg_name
        ngx.say("STORED",empid,name)
        db:set(empid, name)
      }
    }

    location /get {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
        ngx.say(db:get(empid))
      }
    }

		location /download {
     	access_by_lua_file /my_lua/auth.lua;
			content_by_lua_block {
				local filename
				if (ngx.var.arg_file) then
					filename = ngx.var.arg_file
					ngx.log(ngx.OK, 'filename1', ngx.var.arg_file)
				else
					filename = "./jpg.jpg"
					ngx.log(ngx.OK, 'filename2', filename)
				end
				ngx.log(ngx.OK, 'filename final ==>', filename)
				local file = io.open(filename, "rb")
				if file then
				  local contents = file:read( "*a" )
				  local boundary = "somerndstring"
				  ngx.print(contents)	
				else
				  ngx.exit(404)
				end
			}
		}

		location = /favicon.ico {
			content_by_lua_block {
				ngx.exit(404)		
			}
		}
		
		location = /auth {
    	internal;
		
    	proxy_pass http://sso_back;
    	proxy_pass_request_body on;
    	proxy_set_header Content-Length "";
    	proxy_set_header X-Original-URI $request_uri;
    	proxy_set_header Host $http_host;
    	proxy_set_header X-Real-IP $remote_addr;

			if ($http_cookie ~* "cookie_user=([^;]+)(?:;|$)") {
        set $token "$1";
        set $token2 "1231";
      }

			rewrite /auth /cjwt break;
  	}

		location = /check {
			if ($http_cookie ~* "cookie_token=([^;]+)(?:;|$)") {
        set $token "$1";
        set $token2 "1231";
      }
			proxy_pass http://sso:8282;
			proxy_set_header Authorization "Bearer $token";
			proxy_redirect off;
			rewrite /check /cjwt break;
			#rewrite /check /show/$token/$token2 break;	
		}

		error_page 401 = @error401;
		error_page 403 = @error401;

		location @error401 {
			proxy_pass http://sso_back;
			rewrite ^ /login break;
		}


		location /public/ {
			alias /public/;
			autoindex on;
		}

		location /secure/ {
			auth_request /auth;
			alias /public/;
			autoindex on;
		}

		location /upload_file {
			auth_request /auth;
			proxy_pass http://sso_back;
			rewrite /upload_file /upload break;
		}

		location /post_file {
			auth_request /auth;
			content_by_lua_file /my_lua/upload2.lua;
		}

		location /dir {
			content_by_lua_block {
				local dirname='/public'
				--if ngx.var.arg_dirname
				local cmd='ls -l ' .. dirname

				f = io.popen(cmd)

				for name in f:lines() 
					do ngx.say(name) 
				end
			}
		}

		location / {
			proxy_pass http://xfutil;
			rewrite /(.*) /futil/list_file?dir=/$1 break;
		}
  }
}
