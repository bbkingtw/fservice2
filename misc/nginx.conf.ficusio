
worker_processes  1;
error_log logs/error.log;

events {
    worker_connections 1024;
}


http {
	lua_shared_dict db 10m;

  server {
    listen 80;

	
		location /xpublic {
			alias /public/;
			index index.html;
			autoindex on;
		}	

  	location =/x {
      default_type text/html;
			content_by_lua_block {
				local key=ngx.var.uri;
				ngx.say("<p>hello, $key</p>")
				ngx.say("uri==>",key)
				for i=0,10 do
					ngx.say("this is ",i,"<br>")
				end
				--ngx.print('<hr>method',ngx.req.get_Method())
				ngx.print('<hr>header',ngx.req.raw_header())
			}
		}

		location /x2 {
			default_type text/html;
			content_by_lua_block {
				//ngx.print('<hr>header',ngx.req.raw_header())
				ngx.say('aaaaaa </br>')
				local url = ngx.var.uri
				#ngx.say('<br>',url,'<br/>')
				#ngx.print('这次访问的header头是   ',ngx.req.raw_header())
				#ngx.print('<h1> 这个是 h1 </h1>')
				#ngx.print('这次访问的是 get 还是 post 呀   ',ngx.req.get_Method())
				#local args = ngx.req.get_uri_args()
				#ngx.print(args)
				#local res = ngx.location.capture("/")
				#ngx.print('<br>http code <br>‘,res.status)
			}
		}

		location /test {
			rewrite_by_lua_block {
				ngx.ctx.foo = 76
			}
			access_by_lua_block {
				ngx.ctx.foo = ngx.ctx.foo + 3
			}
			content_by_lua_block {
				ngx.say(ngx.ctx.foo)
			}
		}

		location /combine {
      default_type text/html;
			content_by_lua_block {
				res=ngx.location.capture('/test')
				res2=ngx.location.capture('/x')
				ngx.say(ngx.req.get_method());
				ngx.say(res.body)
				ngx.say('<hr>')
				ngx.print(res2.body)
				ngx.print('<hr>',ngx.now())
				ngx.say('<hr>',ngx.now())
			}	
		}

		location /set {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
				local name=ngx.var.arg_name
        ngx.say("STORED",empid,name)
        db:set(empid, name)
      }
    }
    location /get {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
        ngx.say(db:get(empid))
      }
    }

		location /download {
     	access_by_lua_file /my_lua/auth.lua;
			content_by_lua_block {
				local filename
				if (ngx.var.arg_file) then
					filename = ngx.var.arg_file
					ngx.log(ngx.OK, 'filename1', ngx.var.arg_file)
				else
					filename = "./jpg.jpg"
					ngx.log(ngx.OK, 'filename2', filename)
				end
				ngx.log(ngx.OK, 'filename final ==>', filename)
				local file = io.open(filename, "rb")
				if file then
				  local contents = file:read( "*a" )
				  local boundary = "somerndstring"
				  ngx.print(contents)	
				else
				  ngx.exit(404)
				end
			}
		}

		location /upload2 {
			client_max_body_size 100G;
			content_by_lua_file /my_lua/upload2.lua;
		}

		location = /favicon.ico {
			content_by_lua_block {
				ngx.exit(404)		
			}
		}

		
		location = /auth {
    	internal;
			#content_by_lua_block {
			#	ngx.exit(200)		
			#}
		
    	proxy_pass http://localhost:8282;
    	proxy_pass_request_body on;
    	proxy_set_header Content-Length "";
    	proxy_set_header X-Original-URI $request_uri;
    	proxy_set_header Host $http_host;
    	proxy_set_header X-Real-IP $remote_addr;

			if ($http_cookie ~* "cookie_user=([^;]+)(?:;|$)") {
        set $token "$1";
        set $token2 "1231";
      }

			rewrite /auth /csession break;
  	}

		location = /check {
			if ($http_cookie ~* "cookie_token=([^;]+)(?:;|$)") {
        set $token "$1";
        set $token2 "1231";
      }
			proxy_pass http://localhost:8282;
    	#proxy_pass_request_body on;
    	#proxy_set_header Content-Length "";
    	#proxy_set_header X-Original-URI $request_uri;
    	#proxy_set_header Host $http_host;
    	#proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Authorization "Bearer $token";
			proxy_redirect off;
			rewrite /check /cjwt break;
			#rewrite /check /show/$token/$token2 break;	
		}

		error_page 401 = @error401;

    location @error401 {
        return 302 http://localhost:8282/login;
    }

		location /secure {
     	access_by_lua_file /my_lua/auth.lua;
			alias /public/;
			index index.html;
			autoindex on;
			#content_by_lua_block {
			#	ngx.say('you can see the secure content')
			#}
		}

		location /upload_file {
			proxy_pass http://localhost:8282;
			rewrite /upload_file /upload break;
		}

		location /upload {
			client_max_body_size 100G;
			content_by_lua_block {
				local mget=ngx.req.get_method()=="GET"

				if mget then 
					ngx.print("please use post")
					ngx.exit(200)
				end 

				local upload = require "resty.upload"
				local cjson = require "cjson"

				local reqargs = require "resty.reqargs"
				ngx.say(reqargs)

				local chunk_size = 100 -- should be set to 4096 or 8192
				-- for real-world settings

				local form, err = upload:new(chunk_size)
				if not form then
					ngx.log(ngx.ERR, "failed to new upload: ", err)
					ngx.exit(500)
				end

				form:set_timeout(1000) -- 1 sec
				local size=0;
				--local file=io.open("a","w")
				ngx.log(ngx.OK,"file>",file)

				if true then
--#					local file2 = io.open(ngx.var.arg_to, "a+")  
--#					ngx.say(file2)
--#					file2:write("123")
--#					file2:close()
					--io.output(file2)                   
					--io.write("\nhello world")        
					--io.close(file2)
				end

				while true do
					local typ, res, err = form:read()
					if not typ then
						ngx.say("failed to read: ", err)
						return
					end
					--ngx.say("read: ", cjson.encode({typ, res}))
					--ngx.say(res.body)

					size=size+chunk_size
					ngx.say("read so far: ", cjson.encode({typ, res}))

					if typ=='BODY' then
						--file:write("123")
					end

					--ngx.log(ngx.OK, "good","size",size)

					if typ == "eof" then
						ngx.log(ngx.OK, file)
						--file:close()
						break
					end
				end

        local typ, res, err = form:read()
        --ngx.say("read: ", cjson.encode({typ, res}))
      }
    }
  }
}
