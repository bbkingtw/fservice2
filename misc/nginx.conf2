
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
	lua_shared_dict db 10m;

  server {
    listen 80;
    location / {
      default_type text/html;
        content_by_lua '
          ngx.say("<p>hello, world</p>")
        ';
    }
  	location /x {
      default_type text/html;
			content_by_lua_block {
				local key=ngx.var.uri;
				ngx.say("<p>hello, $key</p>")
				ngx.say("uri==>",key)
				for i=0,10 do
					ngx.say("this is ",i,"<br>")
				end
				--ngx.print('<hr>method',ngx.req.get_Method())
				ngx.print('<hr>header',ngx.req.raw_header())
			}
		}

		location /x2 {
			default_type text/html;
			content_by_lua_block {
				//ngx.print('<hr>header',ngx.req.raw_header())
				ngx.say('aaaaaa </br>')
				local url = ngx.var.uri
				#ngx.say('<br>',url,'<br/>')
				#ngx.print('这次访问的header头是   ',ngx.req.raw_header())
				#ngx.print('<h1> 这个是 h1 </h1>')
				#ngx.print('这次访问的是 get 还是 post 呀   ',ngx.req.get_Method())
				#local args = ngx.req.get_uri_args()
				#ngx.print(args)
				#local res = ngx.location.capture("/")
				#ngx.print('<br>http code <br>‘,res.status)
			}
		}

		location /test {
			rewrite_by_lua_block {
				ngx.ctx.foo = 76
			}
			access_by_lua_block {
				ngx.ctx.foo = ngx.ctx.foo + 3
			}
			content_by_lua_block {
				ngx.say(ngx.ctx.foo)
			}
		}

		location /combine {
      default_type text/html;
			content_by_lua_block {
				res=ngx.location.capture('/test')
				res2=ngx.location.capture('/x')
				ngx.say(ngx.req.get_method());
				ngx.say(res.body)
				ngx.say('<hr>')
				ngx.print(res2.body)
				ngx.print('<hr>',ngx.now())
				ngx.say('<hr>',ngx.now())
			}	
		}

		location /set {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
				local name=ngx.var.arg_name
        ngx.say("STORED",empid,name)
        db:set(empid, name)
      }
    }
    location /get {
      content_by_lua_block {
        local db = ngx.shared.db
				local empid=ngx.var.arg_empid
        ngx.say(db:get(empid))
      }
    }

		location /download {
			local filename = "crate.png"
			local file = io.open(filename, "rb")
			local contents = file:read( "*a" )
			local boundary = "somerndstring"
 
			local send = "--" .. boundary ..
				"\r\nContent-Disposition: form-data; " ..
				"name=" .. filename .. "; filename=" .. filename ..
				"\r\nContent-type: image/png" ..
				"\r\n\r\n" .. contents ..
				"\r\n--" .. boundary .. "--\r\n"
 
			--- xlocal headers = {
			--	["Content-Type"] = "multipart/form-data; boundary="..boundary,
			--	["Content-Length"] = #send,
			--}
 
			--local loader = UrlLoader.new("http://localhost/gideros.php&quot;, UrlLoader.POST, headers, send)
 
			--loader:addEventListener(Event.COMPLETE, function(e)
			--	print(e.data)
			--end)
		}

		location /upload {
			client_max_body_size 100G;
			content_by_lua_block {
				local mget=ngx.req.get_method()=="GET"

				if mget then 
					ngx.print("please use post")
					ngx.exit(200)
				end 

				local upload = require "resty.upload"
				local cjson = require "cjson"

				local chunk_size = 10240 -- should be set to 4096 or 8192
				-- for real-world settings

				local form, err = upload:new(chunk_size)
				if not form then
					ngx.log(ngx.ERR, "failed to new upload: ", err)
					ngx.exit(500)
				end

				form:set_timeout(1000) -- 1 sec
				local size=0;

				while true do
					local typ, res, err = form:read()
					if not typ then
						ngx.say("failed to read: ", err)
						return
					end
					--ngx.say("read: ", cjson.encode({typ, res}))
					--ngx.say(res.body)

					size=size+chunk_size
					ngx.say("read so far: ", cjson.encode({typ, size}))

					--ngx.log(ngx.OK, "good","size",size)

					if typ == "eof" then
						break
					end
				end

        local typ, res, err = form:read()
        --ngx.say("read: ", cjson.encode({typ, res}))
      }
    }
  }
}
